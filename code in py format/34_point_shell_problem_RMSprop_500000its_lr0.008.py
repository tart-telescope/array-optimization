import torch
import torch.optim as optim
from torch.autograd import Variable
import matplotlib.pyplot as plt
from torch import sqrt
import numpy as np
from matplotlib.animation import FuncAnimation

x1_0=np.random.normal(1)
y1_0=np.random.normal(1)
x2_0=np.random.normal(1)
y2_0=np.random.normal(1)
x3_0=np.random.normal(1)
y3_0=np.random.normal(1)
x4_0=np.random.normal(1)
y4_0=np.random.normal(1)
y5_0=np.random.normal(1)
x5_0=np.random.normal(1)
x6_0=np.random.normal(1)
x7_0=np.random.normal(1)
x8_0=np.random.normal(1)
x9_0=np.random.normal(1)
x10_0=np.random.normal(1)
x11_0=np.random.normal(1)
x12_0=np.random.normal(1)
x13_0=np.random.normal(1)
x14_0=np.random.normal(1)
x15_0=np.random.normal(1)
x16_0=np.random.normal(1)
x17_0=np.random.normal(1)
x18_0=np.random.normal(1)
x19_0=np.random.normal(1)
x20_0=np.random.normal(1)
x21_0=np.random.normal(1)
x22_0=np.random.normal(1)
x23_0=np.random.normal(1)
x24_0=np.random.normal(1)
x25_0=np.random.normal(1)
x26_0=np.random.normal(1)
x27_0=np.random.normal(1)
x28_0=np.random.normal(1)
x29_0=np.random.normal(1)
x30_0=np.random.normal(1)
x31_0=np.random.normal(1)
x32_0=np.random.normal(1)
x33_0=np.random.normal(1)
x34_0=np.random.normal(1)
y6_0=np.random.normal(1)
y7_0=np.random.normal(1)
y8_0=np.random.normal(1)
y9_0=np.random.normal(1)
y10_0=np.random.normal(1)
y11_0=np.random.normal(1)
y12_0=np.random.normal(1)
y13_0=np.random.normal(1)
y14_0=np.random.normal(1)
y15_0=np.random.normal(1)
y16_0=np.random.normal(1)
y17_0=np.random.normal(1)
y18_0=np.random.normal(1)
y19_0=np.random.normal(1)
y20_0=np.random.normal(1)
y21_0=np.random.normal(1)
y22_0=np.random.normal(1)
y23_0=np.random.normal(1)
y24_0=np.random.normal(1)
y25_0=np.random.normal(1)
y26_0=np.random.normal(1)
y27_0=np.random.normal(1)
y28_0=np.random.normal(1)
y29_0=np.random.normal(1)
y30_0=np.random.normal(1)
y31_0=np.random.normal(1)
y32_0=np.random.normal(1)
y33_0=np.random.normal(1)
y34_0=np.random.normal(1)

x1=(torch.tensor(x1_0))
y1=(torch.tensor(y1_0))
x2=(torch.tensor(x2_0))
y2=(torch.tensor(y2_0))
x3=(torch.tensor(x3_0))
y3=(torch.tensor(y3_0))
x4=(torch.tensor(x4_0))
y4=(torch.tensor(y4_0))
y5=(torch.tensor(y5_0))
y6=(torch.tensor(y6_0))
y7=(torch.tensor(y7_0))
y8=(torch.tensor(y8_0))
y9=(torch.tensor(y9_0))
y10=(torch.tensor(y10_0))
y11=(torch.tensor(y11_0))
y12=(torch.tensor(y12_0))
y13=(torch.tensor(y13_0))
y14=(torch.tensor(y14_0))
y15=(torch.tensor(y15_0))
y16=(torch.tensor(y16_0))
y17=(torch.tensor(y17_0))
y18=(torch.tensor(y18_0))
y19=(torch.tensor(y19_0))
y20=(torch.tensor(y20_0))
y21=(torch.tensor(y21_0))
y22=(torch.tensor(y22_0))
y23=(torch.tensor(y23_0))
y24=(torch.tensor(y24_0))
y25=(torch.tensor(y25_0))
y26=(torch.tensor(y26_0))
y27=(torch.tensor(y27_0))
y28=(torch.tensor(y28_0))
y29=(torch.tensor(y29_0))
y30=(torch.tensor(y30_0))
y31=(torch.tensor(y31_0))
y32=(torch.tensor(y32_0))
y33=(torch.tensor(y33_0))
y34=(torch.tensor(y34_0))
x5=(torch.tensor(x5_0))
x6=(torch.tensor(x6_0))
x7=(torch.tensor(x7_0))
x8=(torch.tensor(x8_0))
x9=(torch.tensor(x9_0))
x10=(torch.tensor(x10_0))
x11=(torch.tensor(x11_0))
x12=(torch.tensor(x12_0))
x13=(torch.tensor(x13_0))
x14=(torch.tensor(x14_0))
x15=(torch.tensor(x15_0))
x16=(torch.tensor(x16_0))
x17=(torch.tensor(x17_0))
x18=(torch.tensor(x18_0))
x19=(torch.tensor(x19_0))
x20=(torch.tensor(x20_0))
x21=(torch.tensor(x21_0))
x22=(torch.tensor(x22_0))
x23=(torch.tensor(x23_0))
x24=(torch.tensor(x24_0))
x25=(torch.tensor(x25_0))
x26=(torch.tensor(x26_0))
x27=(torch.tensor(x27_0))
x28=(torch.tensor(x28_0))
x29=(torch.tensor(x29_0))
x30=(torch.tensor(x30_0))
x31=(torch.tensor(x31_0))
x32=(torch.tensor(x32_0))
x33=(torch.tensor(x33_0))
x34=(torch.tensor(x34_0))

x1.requires_grad_(requires_grad=True) 
y1.requires_grad_(requires_grad=True) 
x2.requires_grad_(requires_grad=True) 
y2.requires_grad_(requires_grad=True) 
x3.requires_grad_(requires_grad=True) 
y3.requires_grad_(requires_grad=True) 
x4.requires_grad_(requires_grad=True) 
y4.requires_grad_(requires_grad=True)
y5.requires_grad_(requires_grad=True)
y6.requires_grad_(requires_grad=True)
y7.requires_grad_(requires_grad=True)
y8.requires_grad_(requires_grad=True)
y9.requires_grad_(requires_grad=True)
y10.requires_grad_(requires_grad=True)
y11.requires_grad_(requires_grad=True)
y12.requires_grad_(requires_grad=True)
y13.requires_grad_(requires_grad=True)
y14.requires_grad_(requires_grad=True)
y15.requires_grad_(requires_grad=True)
y16.requires_grad_(requires_grad=True)
y17.requires_grad_(requires_grad=True)
y18.requires_grad_(requires_grad=True)
y19.requires_grad_(requires_grad=True)
y20.requires_grad_(requires_grad=True)
y21.requires_grad_(requires_grad=True)
y22.requires_grad_(requires_grad=True)
y23.requires_grad_(requires_grad=True)
y24.requires_grad_(requires_grad=True)
y25.requires_grad_(requires_grad=True)
y26.requires_grad_(requires_grad=True)
y27.requires_grad_(requires_grad=True)
y28.requires_grad_(requires_grad=True)
y29.requires_grad_(requires_grad=True)
y30.requires_grad_(requires_grad=True)
y31.requires_grad_(requires_grad=True)
y32.requires_grad_(requires_grad=True)
y33.requires_grad_(requires_grad=True)
y34.requires_grad_(requires_grad=True)
x5.requires_grad_(requires_grad=True)
x6.requires_grad_(requires_grad=True)
x7.requires_grad_(requires_grad=True)
x8.requires_grad_(requires_grad=True)
x9.requires_grad_(requires_grad=True)
x10.requires_grad_(requires_grad=True)
x11.requires_grad_(requires_grad=True)
x12.requires_grad_(requires_grad=True)
x13.requires_grad_(requires_grad=True)
x14.requires_grad_(requires_grad=True)
x15.requires_grad_(requires_grad=True)
x16.requires_grad_(requires_grad=True)
x17.requires_grad_(requires_grad=True)
x18.requires_grad_(requires_grad=True)
x19.requires_grad_(requires_grad=True)
x20.requires_grad_(requires_grad=True)
x21.requires_grad_(requires_grad=True)
x22.requires_grad_(requires_grad=True)
x23.requires_grad_(requires_grad=True)
x24.requires_grad_(requires_grad=True)
x25.requires_grad_(requires_grad=True)
x26.requires_grad_(requires_grad=True)
x27.requires_grad_(requires_grad=True)
x28.requires_grad_(requires_grad=True)
x29.requires_grad_(requires_grad=True)
x30.requires_grad_(requires_grad=True)
x31.requires_grad_(requires_grad=True)
x32.requires_grad_(requires_grad=True)
x33.requires_grad_(requires_grad=True)
x34.requires_grad_(requires_grad=True)


plt.plot(x1.detach().numpy(), y1.detach().numpy(), 'x',color='red',label='Starting locations')
plt.plot(x2.detach().numpy(), y2.detach().numpy(), 'x',color='red')
plt.plot(x3.detach().numpy(), y3.detach().numpy(), 'x',color='red')
plt.plot(x4.detach().numpy(), y4.detach().numpy(), 'x',color='red')
plt.plot(x5.detach().numpy(), y5.detach().numpy(), 'x',color='red')
plt.plot(x6.detach().numpy(), y6.detach().numpy(), 'x',color='red')
plt.plot(x7.detach().numpy(), y7.detach().numpy(), 'x',color='red')
plt.plot(x8.detach().numpy(), y8.detach().numpy(), 'x',color='red')
plt.plot(x9.detach().numpy(), y9.detach().numpy(), 'x',color='red')
plt.plot(x10.detach().numpy(), y10.detach().numpy(), 'x',color='red')
plt.plot(x11.detach().numpy(), y11.detach().numpy(), 'x',color='red')
plt.plot(x12.detach().numpy(), y12.detach().numpy(), 'x',color='red')
plt.plot(x13.detach().numpy(), y13.detach().numpy(), 'x',color='red')
plt.plot(x14.detach().numpy(), y14.detach().numpy(), 'x',color='red')
plt.plot(x15.detach().numpy(), y15.detach().numpy(), 'x',color='red')
plt.plot(x16.detach().numpy(), y16.detach().numpy(), 'x',color='red')
plt.plot(x17.detach().numpy(), y17.detach().numpy(), 'x',color='red')
plt.plot(x18.detach().numpy(), y18.detach().numpy(), 'x',color='red')
plt.plot(x19.detach().numpy(), y19.detach().numpy(), 'x',color='red')
plt.plot(x20.detach().numpy(), y20.detach().numpy(), 'x',color='red')
plt.plot(x21.detach().numpy(), y21.detach().numpy(), 'x',color='red')
plt.plot(x22.detach().numpy(), y22.detach().numpy(), 'x',color='red')
plt.plot(x23.detach().numpy(), y23.detach().numpy(), 'x',color='red')
plt.plot(x24.detach().numpy(), y24.detach().numpy(), 'x',color='red')
plt.plot(x25.detach().numpy(), y25.detach().numpy(), 'x',color='red')
plt.plot(x26.detach().numpy(), y26.detach().numpy(), 'x',color='red')
plt.plot(x27.detach().numpy(), y27.detach().numpy(), 'x',color='red')
plt.plot(x28.detach().numpy(), y28.detach().numpy(), 'x',color='red')
plt.plot(x29.detach().numpy(), y29.detach().numpy(), 'x',color='red')
plt.plot(x30.detach().numpy(), y30.detach().numpy(), 'x',color='red')
plt.plot(x31.detach().numpy(), y31.detach().numpy(), 'x',color='red')
plt.plot(x32.detach().numpy(), y32.detach().numpy(), 'x',color='red')
plt.plot(x33.detach().numpy(), y33.detach().numpy(), 'x',color='red')
plt.plot(x34.detach().numpy(), y34.detach().numpy(), 'x',color='red')

def compute_area(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6,  x7, y7, x8, y8, x9, y9, x10, y10, x11, y11, x12, y12, x13, y13, x14, y14, x15, y15, x16, y16, x17, y17, x18, y18, x19, y19, x20, y20, x21, y21, x22, y22, x23, y23, x24, y24, x25, y25, x26, y26, x27, y27, x28, y28, x29, y29, x30, y30, x31, y31, x32, y32, x33, y33, x34, y34):


   #  area = 0.5 * |x1*y2 -x1*y4 -x3*y2 + x3*y4 -y1*x2 +y1*x4 +y3*x2 -y3*x4|

        return 0.5 * torch.abs((x1*y2 - y1*x2)+(x2*y3 - y2*x3)+(x3*y4 -y3*x4)+(x4*y5-y4*x5)+(x5*y6-y5*x6)+(x6*y7-y6*x7)+(x7*y8-y7*x8)+(x8*y9-y8*x9)+(x9*y10-y9*x10)+(x10*y11-y10*x11)+(x11*y12-y11*x12)+(x12*y13-y12*x13)+(x13*y14-y13*x14)+(x14*y15-y14*x15)+(x15*y16-y15*x16)+(x16*y17-y16*x17)+(x17*y18-y17*x18)+(x18*y19-y18*x19)+(x19*y20-y19*x20)+(x20*y21-y20*x21)+(x21*y22-y21*x22)+(x22*y23-y22*x23)+(x23*y24-y23*x24)+(x24*y25-y24*x25)+(x25*y26-y25*x26)+(x26*y27-y26*x27)+(x27*y28-y27*x28)+(x28*y29-y28*x29)+(x29*y30-y29*x30)+(x30*y31-y30*x31)+(x31*y32-y31*x32)+(x32*y33-y32*x33)+(x33*y34-y33*x34)+(x34*y1-y34*x1))
    


def compute_perimeter(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6,  x7, y7, x8, y8, x9, y9, x10, y10, x11, y11, x12, y12, x13, y13, x14, y14, x15, y15, x16, y16, x17, y17, x18, y18, x19, y19, x20, y20, x21, y21, x22, y22, x23, y23, x24, y24, x25, y25, x26, y26, x27, y27, x28, y28, x29, y29, x30, y30, x31, y31, x32, y32, x33, y33, x34, y34):
   
    s1 = torch.sqrt((x2 - x1)**2 + (y2 - y1)**2)
    s2 = torch.sqrt((x3 - x2)**2 + (y3 - y2)**2)
    s3 = torch.sqrt((x4 - x3)**2 + (y4 - y3)**2)
    s4 = torch.sqrt((x5 - x4)**2 + (y5 - y4)**2)
    s5 = torch.sqrt((x6 - x5)**2 + (y6 - y5)**2)
    s6 = torch.sqrt((x7 - x6)**2 + (y7 - y6)**2)
    s7 = torch.sqrt((x8 - x7)**2 + (y8 - y7)**2)
    s8 = torch.sqrt((x9 - x8)**2 + (y9- y8)**2)
    s9 = torch.sqrt((x10 - x9)**2 + (y10 - y9)**2)
    s10 = torch.sqrt((x11 - x10)**2 + (y11 - y10)**2)
    s11 = torch.sqrt((x12 - x11)**2 + (y12 - y11)**2)
    s12= torch.sqrt((x13 - x12)**2 + (y13 - y12)**2)
    s13= torch.sqrt((x14 - x13)**2 + (y14 - y13)**2)
    s14= torch.sqrt((x15 - x14)**2 + (y15 - y14)**2)
    s15= torch.sqrt((x16 - x15)**2 + (y16 - y15)**2)
    s16= torch.sqrt((x17 - x16)**2 + (y17- y16)**2)
    s17= torch.sqrt((x18 - x17)**2 + (y18- y17)**2)
    s18= torch.sqrt((x19 - x18)**2 + (y19- y18)**2)
    s19= torch.sqrt((x20 - x19)**2 + (y20- y19)**2)
    s20= torch.sqrt((x21 - x20)**2 + (y21 - y20)**2)
    s21= torch.sqrt((x22 - x21)**2 + (y22 - y21)**2)
    s22= torch.sqrt((x23 - x22)**2 + (y23 - y22)**2)
    s23= torch.sqrt((x24 - x23)**2 + (y24 - y23)**2)
    s24= torch.sqrt((x25 - x24)**2 + (y25 - y24)**2)
    s25= torch.sqrt((x26 - x25)**2 + (y26 - y25)**2)
    s26= torch.sqrt((x27 - x26)**2 + (y27- y26)**2)
    s27= torch.sqrt((x28 - x27)**2 + (y28- y27)**2)
    s28= torch.sqrt((x29- x28)**2 + (y29- y28)**2)
    s29= torch.sqrt((x30- x29)**2 + (y30 - y29)**2)
    s30= torch.sqrt((x31 - x30)**2 + (y31 - y30)**2)
    s31= torch.sqrt((x32 - x31)**2 + (y32 - y31)**2)
    s32= torch.sqrt((x33 - x32)**2 + (y33 - y32)**2)
    s33= torch.sqrt((x34 - x33)**2 + (y34 - y33)**2)
    s34= torch.sqrt((x1 - x34)**2 + (y1 - y34)**2)
 
    return s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16 + s17 + s18 + s19 + s20 + s21 + s22 + s23 + s24 + s25 + s26 + s27 + s28 + s29 + s30 +s31 + s32 + s33 + s34 



optimizer = optim.RMSprop([x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6, x7, y7, x8, y8, x9, y9, x10, y10, x11, y11, x12, y12, x13, y13, x14, y14, x15, y15, x16, y16, x17, y17, x18, y18, x19, y19, x20, y20, x21, y21, x22, y22, x23, y23, x24, y24, x25, y25, x26, y26, x27, y27, x28, y28, x29, y29, x30, y30, x31, y31, x32, y32, x33, y33, x34, y34], lr=0.008)
#, momentum=0
steps = 500000

max_perimeter = 100

loss_history = []

# Optimization loop
for step in range(steps):
    # Compute area
    area = compute_area(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6,  x7, y7, x8, y8, x9, y9, x10, y10, x11, y11, x12, y12, x13, y13, x14, y14, x15, y15, x16, y16, x17, y17, x18, y18, x19, y19, x20, y20, x21, y21, x22, y22, x23, y23, x24, y24, x25, y25, x26, y26, x27, y27, x28, y28, x29, y29, x30, y30, x31, y31, x32, y32, x33, y33, x34, y34)
    
    # Compute perimeter
    perimeter = compute_perimeter(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6,  x7, y7, x8, y8, x9, y9, x10, y10, x11, y11, x12, y12, x13, y13, x14, y14, x15, y15, x16, y16, x17, y17, x18, y18, x19, y19, x20, y20, x21, y21, x22, y22, x23, y23, x24, y24, x25, y25, x26, y26, x27, y27, x28, y28, x29, y29, x30, y30, x31, y31, x32, y32, x33, y33, x34, y34)
    
    # apply a penalty if peremter of 100 units is exceeded (not really confindent in this step and the next step)
    perimeter_penalty = (torch.max(torch.tensor(0.), ((perimeter)**2 - (max_perimeter)**2))) #hmmmm
    
    # loss function
    loss = -area + perimeter_penalty**1
    #(torch.log(1/area) + perimeter_penalty**1)
    #-area + perimeter_penalty**1
    #(torch.log((1/area) + 1*perimeter_penalty**2))
    #(torch.log(1/area) + perimeter_penalty**1)  # hmmmm
    #loss = -area + perimeter_penalty**1
    # 2*perimeter_penalty - area
    
    
    # Zero gradients
    optimizer.zero_grad()
    
    # Compute gradients
    loss.backward()
    
    # Update parameters
    optimizer.step()

    loss_history.append(loss.item())

    if step % 100 == 0:
        print(f'Step {step}: loss_history = {loss.item()}') # Prints a value for loss function once every hundred iterations

optimized_x1 = x1.item()
optimized_y1 = y1.item()
optimized_x2 = x2.item()
optimized_y2 = y2.item()
optimized_x3 = x3.item()
optimized_y3 = y3.item()
optimized_x4 = x4.item()
optimized_y4 = y4.item()
optimized_x5 = x5.item()
optimized_y5 = y5.item()

optimized_x6 = x6.item()
optimized_x7 = x7.item()
optimized_x8 = x8.item()
optimized_x9 = x9.item()
optimized_x10 = x10.item()
optimized_x11 = x11.item()
optimized_x12 = x12.item()
optimized_x13 = x13.item()
optimized_x14 = x14.item()
optimized_x15 = x15.item()
optimized_x16 = x16.item()
optimized_x17 = x17.item()
optimized_x18 = x18.item()
optimized_x19 = x19.item()
optimized_x20 = x20.item()
optimized_x21 = x21.item()
optimized_x22 = x22.item()
optimized_x23 = x23.item()
optimized_x24 = x24.item()
optimized_x25 = x25.item()
optimized_x26 = x26.item()
optimized_x27 = x27.item()
optimized_x28 = x28.item()
optimized_x29 = x29.item()
optimized_x30 = x30.item()
optimized_x31 = x31.item()
optimized_x32 = x32.item()
optimized_x33 = x33.item()
optimized_x34 = x34.item()

optimized_y6 = y6.item()
optimized_y7 = y7.item()
optimized_y8 = y8.item()
optimized_y9 = y9.item()
optimized_y10 = y10.item()
optimized_y11 = y11.item()
optimized_y12 = y12.item()
optimized_y13 = y13.item()
optimized_y14 = y14.item()
optimized_y15 = y15.item()
optimized_y16 = y16.item()
optimized_y17 = y17.item()
optimized_y18 = y18.item()
optimized_y19 = y19.item()
optimized_y20 = y20.item()
optimized_y21 = y21.item()
optimized_y22 = y22.item()
optimized_y23 = y23.item()
optimized_y24 = y24.item()
optimized_y25 = y25.item()
optimized_y26 = y26.item()
optimized_y27 = y27.item()
optimized_y28 = y28.item()
optimized_y29 = y29.item()
optimized_y30 = y30.item()
optimized_y31 = y31.item()
optimized_y32 = y32.item()
optimized_y33 = y33.item()
optimized_y34 = y34.item()

# Print the optimized coords, area and perimeter (should be a square)
print("Optimized Coordinates:")
print("Vertex 1: ({}, {})".format(optimized_x1, optimized_y1))
print("Vertex 2: ({}, {})".format(optimized_x2, optimized_y2))
print("Vertex 3: ({}, {})".format(optimized_x3, optimized_y3))
print("Vertex 4: ({}, {})".format(optimized_x4, optimized_y4))
print("Vertex 5: ({}, {})".format(optimized_x5, optimized_y5))
print("Vertex 6: ({}, {})".format(optimized_x6, optimized_y6))
print("Vertex 7: ({}, {})".format(optimized_x7, optimized_y7))
print("Vertex 8: ({}, {})".format(optimized_x8, optimized_y8))
print("Vertex 9: ({}, {})".format(optimized_x9, optimized_y9))
print("Vertex 10: ({}, {})".format(optimized_x10, optimized_y10))
print("Vertex 11: ({}, {})".format(optimized_x11, optimized_y11))
print("Vertex 12: ({}, {})".format(optimized_x12, optimized_y12))
print("Vertex 13: ({}, {})".format(optimized_x13, optimized_y13))
print("Vertex 14: ({}, {})".format(optimized_x14, optimized_y14))
print("Vertex 15: ({}, {})".format(optimized_x15, optimized_y15))
print("Vertex 16: ({}, {})".format(optimized_x16, optimized_y16))
print("Vertex 17: ({}, {})".format(optimized_x17, optimized_y17))
print("Vertex 18: ({}, {})".format(optimized_x18, optimized_y18))
print("Vertex 19: ({}, {})".format(optimized_x19, optimized_y19))
print("Vertex 20: ({}, {})".format(optimized_x20, optimized_y20))
print("Vertex 21: ({}, {})".format(optimized_x21, optimized_y21))
print("Vertex 22: ({}, {})".format(optimized_x22, optimized_y22))
print("Vertex 23: ({}, {})".format(optimized_x23, optimized_y23))
print("Vertex 24: ({}, {})".format(optimized_x24, optimized_y24))
print("Vertex 25: ({}, {})".format(optimized_x25, optimized_y25))
print("Vertex 26: ({}, {})".format(optimized_x26, optimized_y26))
print("Vertex 27: ({}, {})".format(optimized_x27, optimized_y27))
print("Vertex 28: ({}, {})".format(optimized_x28, optimized_y28))
print("Vertex 29: ({}, {})".format(optimized_x29, optimized_y29))
print("Vertex 30: ({}, {})".format(optimized_x30, optimized_y30))
print("Vertex 31: ({}, {})".format(optimized_x31, optimized_y31))
print("Vertex 32: ({}, {})".format(optimized_x32, optimized_y32))
print("Vertex 33: ({}, {})".format(optimized_x33, optimized_y33))
print("Vertex 34: ({}, {})".format(optimized_x34, optimized_y34))

print("Optimized Perimeter: {:.4f}".format(compute_perimeter(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6,  x7, y7, x8, y8, x9, y9, x10, y10, x11, y11, x12, y12, x13, y13, x14, y14, x15, y15, x16, y16, x17, y17, x18, y18, x19, y19, x20, y20, x21, y21, x22, y22, x23, y23, x24, y24, x25, y25, x26, y26, x27, y27, x28, y28, x29, y29, x30, y30, x31, y31, x32, y32, x33, y33, x34, y34).item()))
print("Optimized Area: {:.4f}".format(compute_area(x1, y1, x2, y2, x3, y3, x4, y4, x5, y5, x6, y6,  x7, y7, x8, y8, x9, y9, x10, y10, x11, y11, x12, y12, x13, y13, x14, y14, x15, y15, x16, y16, x17, y17, x18, y18, x19, y19, x20, y20, x21, y21, x22, y22, x23, y23, x24, y24, x25, y25, x26, y26, x27, y27, x28, y28, x29, y29, x30, y30, x31, y31, x32, y32, x33, y33, x34, y34).item()))
print("Theoretical maximum = (aprox 795)")


plt.gca().set_aspect('equal', adjustable='box')
plt.plot(x1.item(), y1.item(), 'o',color='black', label='final locations' )
plt.plot(x2.item(), y2.item(), 'o' ,color='black')
plt.plot(x3.item(), y3.item(), 'o',color='black')
plt.plot(x4.item(), y4.item(),'o',color='black')
plt.plot(x5.item(), y5.item(),'o',color='black')
plt.plot(x6.item(), y6.item(), 'o',color='black')
plt.plot(x7.item(), y7.item(), 'o',color='black')
plt.plot(x8.item(), y8.item(), 'o',color='black')
plt.plot(x9.item(), y9.item(),'o',color='black')
plt.plot(x10.item(), y10.item(),'o',color='black')
plt.plot(x11.item(), y11.item(), 'o' ,color='black')
plt.plot(x12.item(), y12.item(), 'o' ,color='black')
plt.plot(x13.item(), y13.item(), 'o',color='black')
plt.plot(x14.item(), y14.item(),'o',color='black')
plt.plot(x15.item(), y15.item(),'o',color='black')
plt.plot(x16.item(), y16.item(), 'o',color='black')
plt.plot(x17.item(), y17.item(), 'o',color='black')
plt.plot(x18.item(), y18.item(), 'o',color='black')
plt.plot(x19.item(), y19.item(),'o',color='black')
plt.plot(x20.item(), y20.item(),'o',color='black')
plt.plot(x21.item(), y21.item(), 'o' ,color='black')
plt.plot(x22.item(), y22.item(), 'o' ,color='black')
plt.plot(x23.item(), y23.item(), 'o',color='black')
plt.plot(x24.item(), y24.item(),'o',color='black')
plt.plot(x25.item(), y25.item(),'o',color='black')
plt.plot(x26.item(), y26.item(), 'o',color='black')
plt.plot(x27.item(), y27.item(), 'o',color='black')
plt.plot(x28.item(), y28.item(), 'o',color='black')
plt.plot(x29.item(), y29.item(),'o',color='black')
plt.plot(x30.item(), y30.item(),'o',color='black')
plt.plot(x31.item(), y31.item(), 'o' ,color='black')
plt.plot(x32.item(), y32.item(), 'o' ,color='black')
plt.plot(x33.item(), y33.item(), 'o',color='black')
plt.plot(x34.item(), y34.item(),'o',color='black')
plt.xlim(-30, 30)
plt.ylim(-30, 30)
plt.title("Optimising Area of a 34 Sided Pollygon While Constraining the Perimeter")
plt.xlabel('length units')
plt.ylabel('length units')
plt.legend()
plt.grid(color='gray', linestyle='-', linewidth=0.5)
plt.savefig("34_inital_and_final_coords_RMSprop_500000its_lr0.0008.pdf")
plt.show()

plt.plot(loss_history)
plt.grid(True)
plt.xlabel("iteration")
plt.ylabel("loss")
plt.title("loss history - 34 Point Optimizer ")
plt.savefig("loss_history_34_RMSprop_500000its_lr0.008.pdf")